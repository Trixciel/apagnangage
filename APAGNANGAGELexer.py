# Generated from APAGNANGAGE.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,4,0,57,8,0,11,0,12,0,58,1,1,1,1,1,1,1,1,3,1,65,8,1,1,2,4,2,
        68,8,2,11,2,12,2,69,1,2,1,2,1,2,3,2,75,8,2,1,2,5,2,78,8,2,10,2,12,
        2,81,9,2,1,2,5,2,84,8,2,10,2,12,2,87,9,2,3,2,89,8,2,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,5,9,121,8,9,10,9,12,
        9,124,9,9,1,9,1,9,5,9,128,8,9,10,9,12,9,131,9,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,5,14,152,8,14,10,14,12,14,155,9,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,181,8,18,10,18,12,18,184,
        9,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,192,8,18,10,18,12,18,195,
        9,18,1,18,1,18,1,18,1,18,3,18,201,8,18,1,19,5,19,204,8,19,10,19,
        12,19,207,9,19,1,20,1,20,5,20,211,8,20,10,20,12,20,214,9,20,1,20,
        3,20,217,8,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,237,8,21,10,21,12,21,
        240,9,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,249,8,22,10,22,
        12,22,252,9,22,1,22,1,22,1,23,4,23,257,8,23,11,23,12,23,258,1,23,
        1,23,2,205,212,0,24,1,1,3,0,5,2,7,3,9,4,11,5,13,6,15,7,17,0,19,8,
        21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,0,39,0,41,17,43,
        18,45,19,47,20,1,0,6,3,0,9,10,13,13,32,32,2,0,10,10,68,68,1,0,65,
        65,1,0,78,78,1,0,83,83,1,0,10,10,282,0,1,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,56,1,0,0,0,3,64,1,0,0,0,5,88,
        1,0,0,0,7,90,1,0,0,0,9,94,1,0,0,0,11,99,1,0,0,0,13,104,1,0,0,0,15,
        109,1,0,0,0,17,116,1,0,0,0,19,118,1,0,0,0,21,136,1,0,0,0,23,138,
        1,0,0,0,25,140,1,0,0,0,27,142,1,0,0,0,29,144,1,0,0,0,31,163,1,0,
        0,0,33,167,1,0,0,0,35,170,1,0,0,0,37,176,1,0,0,0,39,205,1,0,0,0,
        41,208,1,0,0,0,43,223,1,0,0,0,45,241,1,0,0,0,47,256,1,0,0,0,49,50,
        5,65,0,0,50,57,5,80,0,0,51,52,5,65,0,0,52,53,5,71,0,0,53,57,5,78,
        0,0,54,55,5,65,0,0,55,57,5,78,0,0,56,49,1,0,0,0,56,51,1,0,0,0,56,
        54,1,0,0,0,57,58,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,2,1,0,0,
        0,60,65,5,80,0,0,61,62,5,71,0,0,62,65,5,78,0,0,63,65,5,78,0,0,64,
        60,1,0,0,0,64,61,1,0,0,0,64,63,1,0,0,0,65,4,1,0,0,0,66,68,5,65,0,
        0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,89,
        1,0,0,0,71,72,5,65,0,0,72,75,5,65,0,0,73,75,3,3,1,0,74,71,1,0,0,
        0,74,73,1,0,0,0,75,85,1,0,0,0,76,78,5,65,0,0,77,76,1,0,0,0,78,81,
        1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,
        82,84,3,3,1,0,83,79,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,
        0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,88,67,1,0,0,0,88,74,1,0,0,0,89,
        6,1,0,0,0,90,91,5,80,0,0,91,92,5,79,0,0,92,93,5,86,0,0,93,8,1,0,
        0,0,94,95,5,81,0,0,95,96,5,85,0,0,96,97,5,79,0,0,97,98,5,73,0,0,
        98,10,1,0,0,0,99,100,5,70,0,0,100,101,5,69,0,0,101,102,5,85,0,0,
        102,103,5,82,0,0,103,12,1,0,0,0,104,105,5,70,0,0,105,106,5,65,0,
        0,106,107,5,73,0,0,107,108,5,84,0,0,108,14,1,0,0,0,109,110,5,66,
        0,0,110,111,5,69,0,0,111,112,5,76,0,0,112,113,5,69,0,0,113,114,5,
        67,0,0,114,115,5,75,0,0,115,16,1,0,0,0,116,117,7,0,0,0,117,18,1,
        0,0,0,118,122,5,67,0,0,119,121,3,17,8,0,120,119,1,0,0,0,121,124,
        1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,125,1,0,0,0,124,122,
        1,0,0,0,125,129,5,39,0,0,126,128,3,17,8,0,127,126,1,0,0,0,128,131,
        1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,132,1,0,0,0,131,129,
        1,0,0,0,132,133,5,69,0,0,133,134,5,83,0,0,134,135,5,84,0,0,135,20,
        1,0,0,0,136,137,5,43,0,0,137,22,1,0,0,0,138,139,5,45,0,0,139,24,
        1,0,0,0,140,141,5,42,0,0,141,26,1,0,0,0,142,143,5,47,0,0,143,28,
        1,0,0,0,144,145,5,71,0,0,145,146,5,82,0,0,146,147,5,65,0,0,147,148,
        5,78,0,0,148,149,5,68,0,0,149,153,1,0,0,0,150,152,3,17,8,0,151,150,
        1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,
        1,0,0,0,155,153,1,0,0,0,156,157,5,83,0,0,157,158,5,65,0,0,158,159,
        5,66,0,0,159,160,5,76,0,0,160,161,5,79,0,0,161,162,5,78,0,0,162,
        30,1,0,0,0,163,164,5,79,0,0,164,165,5,85,0,0,165,166,5,72,0,0,166,
        32,1,0,0,0,167,168,5,70,0,0,168,169,5,70,0,0,169,34,1,0,0,0,170,
        171,5,71,0,0,171,172,5,69,0,0,172,173,5,78,0,0,173,174,5,82,0,0,
        174,175,5,69,0,0,175,36,1,0,0,0,176,177,5,84,0,0,177,178,5,85,0,
        0,178,182,1,0,0,0,179,181,3,17,8,0,180,179,1,0,0,0,181,184,1,0,0,
        0,182,180,1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,
        0,185,186,5,70,0,0,186,187,5,65,0,0,187,188,5,73,0,0,188,189,5,83,
        0,0,189,193,1,0,0,0,190,192,3,17,8,0,191,190,1,0,0,0,192,195,1,0,
        0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,
        0,0,196,197,5,85,0,0,197,198,5,78,0,0,198,200,1,0,0,0,199,201,3,
        17,8,0,200,199,1,0,0,0,200,201,1,0,0,0,201,38,1,0,0,0,202,204,9,
        0,0,0,203,202,1,0,0,0,204,207,1,0,0,0,205,206,1,0,0,0,205,203,1,
        0,0,0,206,40,1,0,0,0,207,205,1,0,0,0,208,212,3,37,18,0,209,211,9,
        0,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,213,1,0,0,0,212,210,1,
        0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,215,217,3,17,8,0,216,215,1,
        0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,5,68,0,0,219,220,5,
        65,0,0,220,221,5,78,0,0,221,222,5,83,0,0,222,42,1,0,0,0,223,238,
        3,37,18,0,224,237,8,1,0,0,225,226,5,68,0,0,226,237,8,2,0,0,227,228,
        5,68,0,0,228,229,5,65,0,0,229,230,1,0,0,0,230,237,8,3,0,0,231,232,
        5,68,0,0,232,233,5,65,0,0,233,234,5,78,0,0,234,235,1,0,0,0,235,237,
        8,4,0,0,236,224,1,0,0,0,236,225,1,0,0,0,236,227,1,0,0,0,236,231,
        1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,44,1,
        0,0,0,240,238,1,0,0,0,241,242,5,67,0,0,242,243,5,82,0,0,243,244,
        5,65,0,0,244,245,5,82,0,0,245,246,5,73,0,0,246,250,1,0,0,0,247,249,
        8,5,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,
        1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,6,22,0,0,254,46,
        1,0,0,0,255,257,3,17,8,0,256,255,1,0,0,0,257,258,1,0,0,0,258,256,
        1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,6,23,0,0,261,48,
        1,0,0,0,22,0,56,58,64,69,74,79,85,88,122,129,153,182,193,200,205,
        212,216,236,238,250,258,1,6,0,0
    ]

class APAGNANGAGELexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    INT = 2
    PRINT = 3
    ASSIGN = 4
    FUNCTION_CALL = 5
    BLOCK_START = 6
    BLOCK_END = 7
    EQUALS = 8
    PLUS = 9
    MINUS = 10
    MULTIPLY = 11
    DIVIDE = 12
    LOOP = 13
    LOOP_COUNTER = 14
    BREAK = 15
    IF = 16
    STRING_ASSIGN = 17
    STRING_LINE = 18
    COMMENT = 19
    WS_ = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'POV'", "'QUOI'", "'FEUR'", "'FAIT'", "'BELECK'", "'+'", "'-'", 
            "'*'", "'/'", "'OUH'", "'FF'", "'GENRE'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "PRINT", "ASSIGN", "FUNCTION_CALL", "BLOCK_START", 
            "BLOCK_END", "EQUALS", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
            "LOOP", "LOOP_COUNTER", "BREAK", "IF", "STRING_ASSIGN", "STRING_LINE", 
            "COMMENT", "WS_" ]

    ruleNames = [ "ID", "DECIMAL_SEPARATOR", "INT", "PRINT", "ASSIGN", "FUNCTION_CALL", 
                  "BLOCK_START", "BLOCK_END", "WS", "EQUALS", "PLUS", "MINUS", 
                  "MULTIPLY", "DIVIDE", "LOOP", "LOOP_COUNTER", "BREAK", 
                  "IF", "STRING_START", "STRING_CONTENT", "STRING_ASSIGN", 
                  "STRING_LINE", "COMMENT", "WS_" ]

    grammarFileName = "APAGNANGAGE.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


